<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>
    <%- htmlWebpackPlugin.options.metadata.title %>
  </title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <base href="<%- htmlWebpackPlugin.options.metadata.baseUrl %>">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/manifest.json">
  <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
  <link rel="stylesheet" href="cm/lib/codemirror.css">
  <link rel="stylesheet" href="cm/addon/fold/foldgutter.css">
  <link rel="stylesheet" href="cm/addon/lint/lint.css">
  <link rel="stylesheet" href="cm/addon/dialog/dialog.css">
  <link rel="stylesheet" href="cm/addon/hint/show-hint.css">
  <link rel="stylesheet" href="cm/addon/tern/tern.css">
  <meta name="theme-color" content="#ffffff">
  <style>
    html,
    body {
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
    }

    .splash {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
  </style>
  <script src="cordova.js"></script>
</head>

<body>
  <div aurelia-app="main" style="width:100%;height:100%;">
    <div class="splash">
      <img src="img/logo-vert.png" />
    </div>
    <% if (htmlWebpackPlugin.options.metadata.server) { %>
      <!-- Webpack Dev Server reload -->
      <script src="/webpack-dev-server.js"></script>
      <% } %>
  </div>

  <script src="monaco-editor/min/vs/loader.js"></script>
  <script>
    var monacoEditor = {};
    require.config({ paths: { 'vs': 'monaco-editor/min/vs' } });
    require(['vs/editor/editor.main'], function () { monacoEditor = monaco; });
  </script>

  <script>
    document.addEventListener('click', function (event) {
      navigator.bluetooth.requestDevice({
        //enable this and disable filters to allow any device to connect
        acceptAllDevices: true,
        optionalServices: ['00006f62-6f72-6576-6f6c-736e616d7568',
          '000000ff-0000-1000-8000-00805f9b34fb', 0x00FF, 0xFF01],
        //'00006f62-6f72-6576-6f6c-736e616d7568'
        // filters: [{
        //     //0x00ff, 0xff01, '000000ff-0000-1000-8000-00805f9b34fb'
        //     //'00006f62-6f72-6576-6f6c-736e616d7568'
        //     services: ['00006f62-6f72-6576-6f6c-736e616d7568']
        // }]
      })
        .then(device => device.gatt.connect())
        .then(server => {
          console.log('doing timeout before getting primary service');
          setTimeout(() => {
            console.log('getting primary service', server);
            server.getPrimaryServices().then((service) => {
              console.log('MADE IT TO THE SERVICE ROUND');
            }).catch((err) => {
              console.log(err);
            })
          }, 4000);
        })
        .catch(error => { console.log(error); });
    });

    // console.log(navigator.bluetooth);


    // navigator.bluetooth.requestLEScan({
    //     filters: [{
    //         manufacturerData: {
    //             0x004C: {
    //                 dataPrefix: new Uint8Array([
    //                     0x02, 0x15, // iBeacon identifier.
    //                     0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15  // My beacon UUID.
    //                 ])
    //             }
    //         }
    //     }],
    //     options: {
    //         keepRepeatedDevices: true,
    //     }
    // }).then(() => {
    //     navigator.bluetooth.addEventListener('advertisementreceived', event => {
    //         let appleData = event.manufacturerData.get(0x004C);
    //         if (appleData.byteLength != 23) {
    //             // Isnâ€™t an iBeacon.
    //             console.log('isnt a beacon');
    //             return;
    //         }
    //         let major = appleData.getUint16(18, false);
    //         let minor = appleData.getUint16(20, false);
    //         let txPowerAt1m = -appleData.getInt8(22);
    //         let pathLossVs1m = txPowerAt1m - event.rssi;

    //         console.log(major, minor, pathLossVs1m);
    //     });
    // }).error((err)=>{
    //     console.log(err);
    // });

  </script>
</body>

</html>